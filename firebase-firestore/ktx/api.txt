// Signature format: 2.0
package com.google.firebase.firestore.ktx {

  public final class FirestoreKt {
    ctor public FirestoreKt();
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestore firestore(@NonNull com.google.firebase.ktx.Firebase, @NonNull com.google.firebase.FirebaseApp app);
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestoreSettings firestoreSettings(@NonNull kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.FirebaseFirestoreSettings.Builder,kotlin.Unit> init);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull String field);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull String field, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull com.google.firebase.firestore.FieldPath fieldPath);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull com.google.firebase.firestore.FieldPath fieldPath, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestore getFirestore(@NonNull com.google.firebase.ktx.Firebase);
    method @Nullable public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.DocumentSnapshot);
    method @Nullable public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @NonNull public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.QueryDocumentSnapshot);
    method @NonNull public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.QueryDocumentSnapshot, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @NonNull public static inline <reified T> java.util.List<T> toObjects(@NonNull com.google.firebase.firestore.QuerySnapshot);
    method @NonNull public static inline <reified T> java.util.List<T> toObjects(@NonNull com.google.firebase.firestore.QuerySnapshot, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
  }

}

package com.google.firebase.firestore.ktx.annotations {

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.PROPERTY) public @interface KDocumentId {
  }

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.CLASS) public @interface KIgnoreExtraProperties {
  }

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.PROPERTY) public @interface KServerTimestamp {
  }

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.CLASS) public @interface KThrowOnExtraProperties {
  }

}

package com.google.firebase.firestore.ktx.serialization {

  public final class ExtensionFunctionsKt {
    ctor public ExtensionFunctionsKt();
    method @NonNull public static inline <reified T> com.google.android.gms.tasks.Task<java.lang.Void> setData(@NonNull com.google.firebase.firestore.DocumentReference, @Nullable T data);
  }

  public final class NestListEncoder extends kotlinx.serialization.encoding.AbstractEncoder {
    ctor public NestListEncoder(@NonNull java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>> map, int depth, @NonNull java.util.List<java.lang.Object> list);
    ctor public NestListEncoder();
    method @NonNull public kotlinx.serialization.modules.SerializersModule getSerializersModule();
    property @NonNull public kotlinx.serialization.modules.SerializersModule serializersModule;
  }

  public final class NestedMapEncoder extends kotlinx.serialization.encoding.AbstractEncoder {
    ctor public NestedMapEncoder(@NonNull java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>> map, int depth, @NonNull java.util.List<java.lang.Object> list, @Nullable kotlinx.serialization.descriptors.SerialDescriptor descriptor);
    ctor public NestedMapEncoder();
    method @NonNull public error.NonExistentClass encodeEnum(@NonNull kotlinx.serialization.descriptors.SerialDescriptor enumDescriptor, int index);
    method @NonNull public kotlinx.serialization.modules.SerializersModule getSerializersModule();
    method @NonNull public java.util.Map<java.lang.String,java.lang.Object> serializedResult();
    property @NonNull public kotlinx.serialization.modules.SerializersModule serializersModule;
    field public static final com.google.firebase.firestore.ktx.serialization.NestedMapEncoder.Companion Companion;
  }

  public static final class NestedMapEncoder.Companion {
  }

  public final class NestedMapEncoderKt {
    ctor public NestedMapEncoderKt();
    method @NonNull public static <T> java.util.Map<java.lang.String,java.lang.Object> encodeToMap(@NonNull kotlinx.serialization.SerializationStrategy<? super T> serializer, @Nullable T value);
    method @NonNull public static inline <reified T> java.util.Map<java.lang.String,java.lang.Object> encodeToMap(@Nullable T value);
  }

}

